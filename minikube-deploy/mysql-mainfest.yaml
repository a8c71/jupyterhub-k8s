apiVersion: v1
kind: PersistentVolume # Create PV
metadata:
  namespace: default
  name: pv-mysql # Sets PV name
  labels:
    type: local # Sets PV's type
    app: mysql-deployment
spec:
  #storageClassName: "manual"
  claimRef:
    name: mysql-pv-claim
    namespace: default
  capacity:
    storage: 3Gi # Sets PV's size
  accessModes:
    - ReadWriteMany
  hostPath:
    path: /data/mysql # Sets PV's host path

---
# persistent volume claim of mysql
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  namespace: default
  name: mysql-pv-claim
  labels:
    app: mysql
spec:
  accessModes:
    - ReadWriteOnce
  #storageClassName: "manual"
  resources:
    requests:
      storage: 3Gi

---
# Mysql deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: mysql
  name: mysql-deployment
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
        - name: mysql
          image: "mysql:5.6"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 3306
          envFrom:
            - configMapRef:
                name: application-config
          volumeMounts:
            - name: mysql-persistent-storage
              mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim

---
# Service of type ClusterIP for MYSQL in order for rubicon-jupyterhub to connect "internally"
# by jupyterhub it is cluster ip, but also being explicit
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: mysql-service
  labels:
    app: mysql
spec:
  selector:
    app: mysql
  ports:
    - protocol: TCP
      port: 3306
      targetPort: 3306
  type: ClusterIP

---

